---
- name: KVM Bootstrap
  hosts:
    all

    # Reqs:
    # "ansible-galaxy collection install community.libvirt"
    # mkisofs (Linux) or cdrtools (macOS)

  vars:
    #ansible_python_interpreter: /Users/jholland/opt/miniconda3/bin/python3

    # Directories for bootstrap ISO
    directories:
      - name: "config"
      - name: "software"
      - name: "license"
      - name: "content"
      - name: "plugins"

  tasks:
    - name: Update repositories cache and install "foo" package
      ansible.builtin.apt:
        name: mkisofs
        update_cache: yes
        become: yes

    - name: Create directories
      ansible.builtin.file:
        path: "{{ bootstrap_location }}/{{ item.name }}"
        state: directory
      with_items: "{{ directories }}"

    - name: Create init-cfg.txt
      copy:
        dest: "{{ bootstrap_location }}/config/init-cfg.txt"
        content: |
          type=dhcp-client
          hostname={{ hostname }}
          panorama-server={{ panorama01 }}
          panorama-server-2={{ panorama02 }}
          dgname={{ device_group }}
          tplname={{ template_stack }}
          dns-primary={{ dns_server01 }}
          dns-secondary={{ dns_server02 }}
          auth-key={{ plugin_authkey }}
          plugin-op-commands=panorama-licensing-mode-on
    #          ip-address={{ ipv4_address }}
    #          netmask={{ ipv4_mask }}
    #          default-gateway={{ ipv4_gateway  }}
    #          ipv6-address={{ ipv6_address }}{{ ipv6_subnet }}
    #          ipv6-default-gateway={{ ipv6_gateway }}

    - name: Create bootstrap ISO
      shell: "mkisofs -o {{ iso_location }} -iso-level 4 {{ bootstrap_location }}"

    - name: Create image directory
      ansible.builtin.file:
        path: "{{ image_download_dir }}"
        state: directory

    - name: Download VM-Series base image
      ansible.builtin.get_url:
        url: "{{ image_url }}"
        checksum: "{{ image_hash }}"
        dest: "{{ image_download_location }}"

    - name: Copy base image to runtime location
      ansible.builtin.copy:
        src: "{{ image_download_location }}"
        dest: "{{ image_runtime_location }}"
        remote_src: yes

    - name: Get VMs list
      community.libvirt.virt:
        command: list_vms
      register: empty_vms
      changed_when: no
      become: yes

    - name: Display VMs
      debug:
        msg:
          - "{{ empty_vms }}"

    - name: Create VM if not exists
      block:
        - name: Create VM-Series VM
          community.libvirt.virt:
            command: define
            xml: "{{ lookup('template', 'pa-vm-paramd.xml.j2') }}"
          become: yes
      when: "hostname not in empty_vms.list_vms"

    - name: Get VMs list again again
      community.libvirt.virt:
        command: list_vms
      register: now_vms
      changed_when: no
      become: yes

    - name: Display VMs
      debug:
        msg:
          - "{{ now_vms }}"

    - name: Start VM
      community.libvirt.virt:
        name: "{{ hostname }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2
      become: yes
