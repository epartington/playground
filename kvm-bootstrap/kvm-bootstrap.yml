---
- name: KVM Bootstrap
  hosts: all

  vars:
    #ansible_python_interpreter: /Users/jholland/opt/miniconda3/bin/python3

    # GIVEN VARIABLES
    # FQDN/hostname for the firewall
    hostname: "fw01"
    # IPv6 address
    #ipv6_address: "fd85:e493:71ca::5"
    ipv6_address: "2600:1900:40c0:a4f1:0:5::"
    # IPv6 gateway
    #ipv6_gateway: "fd85:e493:71ca::1"
    ipv6_gateway: "fe80::4001:aff:fe00:401"
    # IPv6 subnet
    ipv6_subnet: "/128"
    # DNS server
    #dns_server01: "2620:119:35::35"
    #dns_server02: "2620:119:53::53"
    dns_server01: "1.1.1.1"
    dns_server02: "4.2.2.2"
    # Group name for configuration membership
    device_group: "train-dg"
    template_stack: "train-ts"
    # URL for configuration management
    panorama01: "" # variable set in vars.yml
    panorama02: "" # variable set in vars.yml
    
    # EXTRA VARIABLES
    # Auth for Panorama
    vmauthkey: "" # variable set in vars.yml
    # PAN-OS Version
    panos_version: "10.1.4"
    # Non-utilised "dummy" IPv4 addressing
    ipv4_address: "192.168.122.250"
    ipv4_mask: "255.255.255.0"
    ipv4_gateway: "192.168.122.1"
    # Disk location of VM-Series base image
    image_location: "/home/jholland/PA-VM-KVM-{{ panos_version }}.qcow2"
    # Disk location of bootstrap ISO for VM-Series
    iso_location: "/home/jholland/bootstrap{{ hostname }}.iso"

    # Directories for bootstrap ISO
    directories:
      - name: "config"
      - name: "software"
      - name: "license"
      - name: "content"
      - name: "plugins"

  tasks:
    - name: Create directories
      ansible.builtin.file:
        path: "bootstrap/{{ item.name }}"
        state: directory
      with_items: "{{ directories }}"

    - name: Create init-cfg.txt
      copy:
        dest: "bootstrap/config/init-cfg.txt"
        content: |
          type=dhcp
          hostname={{ hostname }}
          panorama-server={{ panorama01 }}
          panorama-server-2={{ panorama02 }}
          dgname={{ device_group }}
          tplname={{ template_stack }}
          dns-primary={{ dns_server01 }}
          dns-secondary={{ dns_server02 }}
          vm-auth-key={{ vmauthkey }}
#          ip-address={{ ipv4_address }}
#          netmask={{ ipv4_mask }}
#          default-gateway={{ ipv4_gateway  }}
#          ipv6-address={{ ipv6_address }}{{ ipv6_subnet }}
#          ipv6-default-gateway={{ ipv6_gateway }}

    - name: Remove existing bootstrap ISOs
      ansible.builtin.file:
        path: "{{ iso_location }}"
        state: absent
      become: yes

    # Reqs: mkisofs (Linux) or cdrtools (macOS)
    - name: Create bootstrap ISO
      shell: "mkisofs -o {{ iso_location }} -iso-level 4 bootstrap"

    ## # Reqs: pip install pycdlib
    ## # ** Does not work, unable to create ISO with a file inside a folder. Also non-idempotent anyway **
    ##
    ## - name: Create bootstrap ISO
    ##   community.general.iso_create:
    ##     src_files:
    ##       - bootstrap/config/init-cfg.txt
    ##       - bootstrap/software
    ##       - bootstrap/license
    ##       - bootstrap/content
    ##       - bootstrap/plugins
    ##     dest_iso: {{ iso_location }}
    ##     vol_ident: "BOOTSTRAP"
    ##     interchange_level: 4
    ##     joliet: 3
    ##     rock_ridge: 1.09


    # - name: Download VM-Series base image
    #   get_url:
    #     url: https://jholland.jfrog.io/artifactory/default-generic-local/PA-VM-KVM-10.1.3.qcow2
    #     checksum: sha256:70a6ee390fa721a8565a0b2e3f67826b6d5f064677ebfb4fbcde70454a697a52
    #     dest: {{ image_location }}

    # Reqs "ansible-galaxy collection install community.libvirt"
    - name: Get VMs list
      community.libvirt.virt:
        command: list_vms
      register: existing_vms
      changed_when: no
      become: yes

    - name: Display VMs
      debug:
        msg:
          - "{{ existing_vms }}"

# ADD TASK TO UNDEFINE VM BEFORE CREATION 

    - name: Create VM if not exists
      block:
        - name: Create VM-Series VM
          community.libvirt.virt:
            command: define
            xml: "{{ lookup('template', 'pa-vm-paramd.xml.j2') }}"
          become: yes
      when: "hostname not in existing_vms.list_vms"

    - name: Get VMs list again
      community.libvirt.virt:
        command: list_vms
      register: now_vms
      changed_when: no
      become: yes

    - name: Display VMs
      debug:
        msg:
          - "{{ now_vms }}"

    - name: Start VM
      community.libvirt.virt:
        name: "{{ hostname }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2
      become: yes
